<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_charA</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>s_charA</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initializations
// Stats
global.maxHealth = 300;
global.maxStamina = 100;
def = 0.80;                                                     // % damage absorb on block

// Set variables
health = global.maxHealth;
global.stamina = global.maxStamina;
k_moveSpeed = 6;                                                // keyboard move speed
gp_moveSpeed = 5;                                               // gamepad move speed
image_speed = .25;
debug = false;                                                  // show debug info
shootScript = c_player_shoot;                                   // character shoot method

stamDelay = false;
invincible = false;
blocking = false;
rolling = false;
control = true;                                                 // able to control movement
stunned = false;
knockback = 0;
knockbackDir = 0;
core = instance_create(x, y, o_playerCore);
spIdle = s_charA_Idle;

// tracking target
target = instance_create(x, y, o_target);

// Init weapons
shotTimer[0] = 0;
shotDelay[0] = 10;
shotNum[0] = 1;
weaponSway = 0;
weaponLvl = 0;

// Init movement
spMoveI = s_charA_Idle;
spMoveU = s_charB_U;
spMoveD = s_charB_D;
spMoveL = s_charB_L;
spMoveR = s_charB_R;
spMoveUL = s_charB_UL;
spMoveUR = s_charB_UR;
spMoveDL = s_charB_DL;
spMoveDR = s_charB_DR;

// Init roll
rollRelX = 0;
rollRelY = 0;

// Touch tracking
touchCurrX = 0;
touchPrevX = 0;
touchCurrY = 0;
touchPrevY = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>c_screen_shake(70);

with core
    instance_destroy();

// alarm to move to gameover screen
with o_scoreKeeper
    alarm_set(0,180);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Regain control
control = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop invincibility after roll
invincible = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Dodgeroll
rolling = false;
sprite_index = idleSprite;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start recovering stamina again
stamDelay = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Overdrive
for (var i = 0; i &lt; array_length_1d(shotDelay); i++)
    shotDelay[i] *= 2;
    
weaponSway = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Keyboard input
var k_up = keyboard_check(ord('W'));
var k_down = keyboard_check(ord('S'));
var k_left = keyboard_check(ord('A'));
var k_right = keyboard_check(ord('D'));   
keyboard_check_pressed 
var k_block = keyboard_check(ord('U')) || gamepad_button_check(0, gp_face2);
var k_hmove = k_right - k_left;
var k_vmove = k_down - k_up;

// Gamepad input
var gp_hmove = gamepad_axis_value(0, gp_axislh);
var gp_vmove = gamepad_axis_value(0, gp_axislv);
var gp_hroll = gamepad_axis_value(0, gp_axisrh);
var gp_vroll = gamepad_axis_value(0, gp_axisrv);

var hmove = 0, vmove = 0;



// Touchscreen/mouse movement
if device_mouse_check_button_pressed(0, mb_left)                // start tracking finger movement
{
    touchCurrX = device_mouse_x(0);
    touchPrevX = touchCurrX;
    touchCurrY = device_mouse_y(0);
    touchPrevY = touchCurrY;
}
else if device_mouse_check_button(0, mb_left)                   // update finger tracking
{
    touchPrevX = touchCurrX;
    touchCurrX = device_mouse_x(0);
    touchPrevY = touchCurrY;
    touchCurrY = device_mouse_y(0);
}
else if device_mouse_check_button_released(0, mb_left)          // reset tracking
{
    touchCurrX = touchPrevX;
    touchCurrY = touchPrevY;
}

// update movement target
target.x += touchCurrX - touchPrevX;
target.y += touchCurrY - touchPrevY;
targetDir = point_direction(x, y, target.x, target.y);
targ_hmove = lengthdir_x(k_moveSpeed, targetDir);
targ_vmove = lengthdir_y(k_moveSpeed, targetDir);
if distance_to_point(target.x, target.y) &lt; 2
{
    targ_hmove = 0;
    targ_vmove = 0;
    sprite_index = spIdle;
}
else if targetDir &lt; 22.5    sprite_index = spMoveR;
else if targetDir &lt; 67.5    sprite_index = spMoveUR;
else if targetDir &lt; 112.5   sprite_index = spMoveU;
else if targetDir &lt; 157.5   sprite_index = spMoveUL;
else if targetDir &lt; 202.5   sprite_index = spMoveL;
else if targetDir &lt; 247.5   sprite_index = spMoveDL;
else if targetDir &lt; 292.5   sprite_index = spMoveD;
else if targetDir &lt; 347.5   sprite_index = spMoveDR;
else                        sprite_index = spMoveR;

if control                                                      // not rolling or hitstunned
{  
    // base movement
    hmove = (k_hmove * k_moveSpeed) + (gp_hmove * gp_moveSpeed) + targ_hmove;        
    vmove = (k_vmove * k_moveSpeed) + (gp_vmove * gp_moveSpeed) + targ_vmove;

    // dodge roll
    if device_mouse_check_button_pressed(1, mb_left)
    {
        rollStartX = device_mouse_x(1);
        rollStartY = device_mouse_y(1);
        dragDist = 0; 
        dragStartTime = get_timer();
    }
    else if device_mouse_check_button(1, mb_left)
    {
        var rollEndX = device_mouse_x(1);
        var rollEndY = device_mouse_y(1);
        
        var dragDist = point_distance(rollStartX, rollStartY, rollEndX, rollEndY);    
        var dragTime = get_timer() - dragStartTime;
        

        if (dragDist &gt; 20) &amp;&amp; (dragTime &lt; 250000) &amp;&amp; (global.stamina &gt; 0)
            c_dodgeroll(point_direction(rollStartX, rollStartY, rollEndX, rollEndY));
    }
    
    // Gamepad dodge roll
    var rollStickDist = point_distance(0, 0, gp_hroll, gp_vroll);
    
    if (rollStickDist &gt; 0.5) &amp;&amp; (global.stamina &gt; 0)
        c_dodgeroll(darctan2(-gp_vroll, gp_hroll));
    
    // Blocking
    if k_block
    {
        if !rolling
        {
            blocking = true;
            sprite_index = s_charABlock;
        }
    }
    else if blocking
    {
        blocking = false;
        sprite_index = idleSprite;
    }
}
if rolling
{
    hmove += rollRelX;
    vmove += rollRelY;
}
if stunned
{
    hmove += lengthdir_x(knockback/2, knockbackDir);
    vmove += lengthdir_y(knockback/2, knockbackDir);
    knockback -= 1;
    
    if knockback &lt;= 0
    {
        stunned = false;
        control = true;
    }
}


// wall collision
if place_meeting(x + hmove, y, o_wall)
{
    while !place_meeting(x + sign(hmove), y, o_wall)
        x += sign(hmove);
    hmove = 0;
}
if place_meeting(x, y + vmove, o_wall)
{
    while !place_meeting(x, y + sign(vmove), o_wall)
        y += sign(vmove);
    vmove = 0;
}


// clamp player to room
x = clamp(x + hmove, 0, room_width);
y = clamp(y + vmove, 0, room_height);


// update stamina
var r = 0;
if !stamDelay
{
    if blocking     r = 0.1;
    else            r = 0.6;    
}
global.stamina = min( global.stamina + r, global.maxStamina );


// fire weapons
if !(blocking || stunned || rolling)
    script_execute(shootScript);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="o_hitbox">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !invincible
{
    with other                                                  // destroy bullet
    {
        var dam = damage * 25;
        var kb = knockback;                                     // force of shot
        var hitDir = direction;                                 // angle of impact
        instance_destroy();
    }
    
    stunned = true;
    control = false;
    knockback = kb;
    knockbackDir = hitDir;
    
    if blocking &amp;&amp; global.stamina &gt; 0
    {
        c_stamina_damage(dam * def);
        health -= ceil(dam * (1 - def));                        // take partial damage
        knockback = round(knockback/4);
    }
    else
    {       
        health -= dam;
        c_screen_shake(10);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="o_enemyShot">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !invincible
{
    with other                                                  // destroy bullet
    {
        var dam = damage * 25;
        var kb = knockback;                                     // force of shot
        var hitDir = direction;                                 // angle of impact
        instance_destroy();
    }
    
    stunned = true;
    control = false;
    knockback = kb;
    knockbackDir = hitDir;
    
    if blocking &amp;&amp; global.stamina &gt; 0
    {
        c_stamina_damage(dam * def);
        health -= ceil(dam * (1 - def));                        // take partial damage
        knockback = round(knockback/4);
    }
    else
    {       
        health -= dam;
        c_screen_shake(10);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_left);
if debug
    draw_text(5, 20, "FPS: " + string(fps) + "#(" + string(fps_real) + ")");

draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var dropRates;
dropRates[0] = 0;
dropRates[1] = 0;
dropRates[2] = 00;
dropRates[3] = 100;
c_spawn_powerup(room_width/2, room_height/2, dropRates);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="74">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>c_spawn_points(room_width/2, room_height/2, 10000);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="71">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>debug = !debug;
show_debug_overlay(debug);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
